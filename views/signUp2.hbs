
<div class="row">
  <div class="col-lg-12 col-md-12 col-sm-12">
    <form id="form" action="/signup2" method="POST" class='text-center p-5'>
      <h3 class='h2 mb-4'>¡Bienvenido a IRON PETS!</h3>
      <p class='h6 mb-4 form-text text-muted pl-4 pr-4'>Ingresa tus datos de contacto para ayudarte en todo momento</p>
      <div class="form-row">
        <div class="col">
            <input type="text" name="name" class="form-control mb-4" placeholder="Nombre(s) *">
        </div>
        <div class="col">
            <input type="text" name="lastname" class="form-control mb-4" placeholder="Apellido(s) *">
        </div>
      </div>
      <div class="form-group">
          <input type="email" name="email" class="form-control mb-4" placeholder="Correo electronico *" aria-describedby="emailHelp">
      </div>  
      <div class="form-group">
        <input type="number" name="phone" class="form-control mb-4" placeholder="Télefono *"  pattern="[0-9]{3}-[0-9]{3}-[0-9]{4}" required>
      </div>
      <div class="form-group">
        <input type="password" name="password" class="form-control mb-4" placeholder="Contraseña *">
      </div>
      <div class="form-group mb-4">
          <select id="userType" name="role" class="custom-select" required>
                <option value="">Soy:</option>
                <option value="ironSaver">ironSaver</option>
                <option value="Refugio">Refugio</option>
            </select>
        </div>
        <div id="Refugio" class="form-group direction" style="display:none">
          <input id="autocomplete"
                class="form-control mb-4"
                placeholder="Enter your address"
                onFocus="geolocate()"
                type="text"
                name="direction"/>
          <input id="coordinates" >  
        </div>
     
      <button class="btn btn-info my-4 btn-block" type="submit">Submit</button>
        {{#if errorMessage}}
          <div class="error-message">{{ errorMessage }}</div>
        {{/if}}
      <br>
      <p class="h6 account-message text-muted">Ya tienes una cuenta? <a href="/login">Inicia sesión</a></p>
    </form>
  </div>
</div>
   <script>
// This sample uses the Autocomplete widget to help the user select a
// place, then it retrieves the address components associated with that
// place, and then it populates the form fields with those details.
// This sample requires the Places library. Include the libraries=places
// parameter when you first load the API. For example:
// <script
// src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

var placeSearch, autocomplete;

var componentForm = {
  lat: '',
  long :''

};

function initAutocomplete() {
  // Create the autocomplete object, restricting the search predictions to
  // geographical location types.
  autocomplete = new google.maps.places.Autocomplete(
      document.getElementById('autocomplete'), {types: ['geocode']});

  // Avoid paying for data that you don't need by restricting the set of
  // place fields that are returned to just the address components.
  autocomplete.setFields(['address_component']);

  // When the user selects an address from the drop-down, populate the
  // address fields in the form.
  autocomplete.addListener('place_changed', fillInAddress);
}

function fillInAddress() {
  // Get the place details from the autocomplete object.
  var place = autocomplete.getPlace();

  for (var component in componentForm) {
    document.getElementById(component).value = '';
    document.getElementById(component).disabled = false;
  }

  // Get each component of the address from the place details,
  // and then fill-in the corresponding field on the form.
  for (var i = 0; i < place.address_components.length; i++) {
    var addressType = place.address_components[i].types[0];
    if (componentForm[addressType]) {
      var val = place.address_components[i][componentForm[addressType]];
      document.getElementById(addressType).value = val;
    }
  }
}

// Bias the autocomplete object to the user's geographical location,
// as supplied by the browser's 'navigator.geolocation' object.
function geolocate() {
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(function(position) {
      var geolocation = {
        lat: position.coords.latitude,
        lng: position.coords.longitude
      };
      document.getElementById("coordinates").value = geolocation.lat;
      console.log(geolocation)
      var circle = new google.maps.Circle(
          {center: geolocation, radius: position.coords.accuracy});
      autocomplete.setBounds(circle.getBounds());
    });
  
  }
}
    </script>
